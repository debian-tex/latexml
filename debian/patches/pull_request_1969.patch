From d5b60509831d43161e4f501d0f7e2e2d8e036a03 Mon Sep 17 00:00:00 2001
From: Deyan Ginev <deyan.ginev@gmail.com>
Date: Wed, 26 Oct 2022 10:26:53 -0400
Subject: [PATCH] \readline respects \endlinechar. support \the\font

---
 lib/LaTeXML/Package/TeX.pool.ltxml          |  5 +++++
 lib/LaTeXML/Package/babel_support.sty.ltxml |  1 -
 lib/LaTeXML/Package/csquotes.sty.ltxml      | 16 ++++++++--------
 lib/LaTeXML/Package/eTeX.pool.ltxml         | 12 +++++++++++-
 4 files changed, 24 insertions(+), 10 deletions(-)

--- latexml.orig/lib/LaTeXML/Package/TeX.pool.ltxml
+++ latexml/lib/LaTeXML/Package/TeX.pool.ltxml
@@ -362,6 +362,9 @@
       [$defn, ($$defn{parameters} ? $$defn{parameters}->readArguments($gullet) : ())]; }
     else {
       if ($token && ($token->getCatcode == CC_CS)) {
+        if ($token->getString eq '\font') {
+          # \font is a bit of a register-like exception
+          return [$defn]; }
         Error('expected', '<register>', $gullet,
           "A <register> was supposed to be here", "Got " . Stringify($token),
           "Defining it now.");
@@ -1007,6 +1010,8 @@
     my $type = $defn->isRegister;
     if (!$type) {
       my $cs = ToString($defn->getCS);
+      if ($cs eq '\font') {    # what to do here?
+        return T_CS('\tenrm'); }
       Error('unexpected', "\\the$cs", $gullet, "You can't use $cs after \\the"); return (); }
     my $value = $defn->valueOf(@args);
     ## In all cases, these should be OTHER, except for space. (!?)
--- latexml.orig/lib/LaTeXML/Package/babel_support.sty.ltxml
+++ latexml/lib/LaTeXML/Package/babel_support.sty.ltxml
@@ -149,7 +149,6 @@
 DefPrimitive('\ltx@bbl@select@language{}', sub {
     my ($stomach, $language) = @_;
     $language = ToString(Expand($language));
-    NoteSTDERR("SELECTING LANGUAGE $language !");
     my $iso = $$bbl_language_map{$language};
     MergeFont(language => $iso) if $iso;
     return; });
--- latexml.orig/lib/LaTeXML/Package/csquotes.sty.ltxml
+++ latexml/lib/LaTeXML/Package/csquotes.sty.ltxml
@@ -27,11 +27,11 @@
 ###########################################################################
 # Compatibility fixes
 
+# the unicode check does not work properly in LaTeXML
+# furthermore, package version <= 2018/04/06 v1.3b contain
+# a known bug, but might still be around.
+# therfore we skip the check here.
 RawTeX(<<'EoTeX');
-% the unicode check does not work properly in LaTeXML
-% furthermore, package version <= 2018/04/06 v1.3b contain
-% a known bug, but might still be around. 
-% therfore we skip the check here. 
 \def\csq@ifutfchar#1{%
   \ifundef\@inpenc@undefined
     {\@secondoftwo}
@@ -225,12 +225,12 @@
        {\unexpanded{\csq@switchlang{#3{#4}}}}}}%
   #1\csq@tempa#8#2%
   \end{\csq@blockenvironment}\ltxml@mkblockquote@close}
-
-% Because detection of word length does not work properly in LaTeXML
-% always use a proper block-quote environment
-\let\csq@bquote@ii\csq@bquote@iii
 EoTeX
 
+# Because detection of word length does not work properly in LaTeXML
+# always use a proper block-quote environment
+Let('\csq@bquote@ii', '\csq@bquote@iii');
+
 # update the 'quote' environment to be <ltx:quote class="ltx_blockquote">
 DefMacro('\ltxml@mkblockquote@open', '\begingroup\ltxml@mkblockquote@open@i');
 DefPrimitive('\ltxml@mkblockquote@open@i', sub {
--- latexml.orig/lib/LaTeXML/Package/eTeX.pool.ltxml
+++ latexml/lib/LaTeXML/Package/eTeX.pool.ltxml
@@ -44,7 +44,17 @@
     my ($gullet, $port, $token) = @_;
     $port = ToString($port);
     if (my $mouth = LookupValue('input_file:' . $port)) {
-      DefMacroI($token, undef, Tokens(Explode(($mouth->readRawLine || '') . "\r"))); }
+      my $line_string = ($mouth->readRawLine || '');
+      # DG: Can't we do this \endlinechar check in readRawLine ?!
+      # DG:  and can't we make it *faster* ?
+      if (my $eol = $STATE->lookupDefinition(T_CS('\endlinechar'))) {
+        my $eol   = $eol->valueOf()->valueOf;
+        my $eolch = (($eol > 0) && ($eol <= 255) ? chr($eol) : undef);
+        if ($eolch) {
+          $line_string .= $eolch; } }
+      else {
+        $line_string .= "\r"; }
+      DefMacroI($token, undef, Tokens(Explode($line_string))); }
     return; });
 
 DefMacro('\scantokens GeneralText', sub {
